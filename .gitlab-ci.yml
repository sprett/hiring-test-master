image: node:22.10.0

stages:
  - test
  - release

test:
  stage: test
  only:
    - merge_requests
  script:
    - yarn install --progress=false --no-save
    - yarn run test

cache:
  paths:
    - node_modules/

# Push a tag and notify MatterMost
# Loosely inspired by:
# - https://markswanderingthoughts.nl/tagging-in-gitlab-ci-pipeline-using-deploy-keys/
# - https://www.garybell.co.uk/creating-a-release-with-gitlab-ci-and-composer/
publish:
  stage: release
  only:
    - master
  script:
    # Get the version from package.json
    - VERSION=$(node -p "require('./package.json').version")
    # Prepare MatterMost message
    - MESSAGE="ðŸ¤– Hiring Test version $VERSION released ([release notes](https://gitlab.com/oliasoft-open-source/hiring-test/-/blob/master/release-notes.md))"
    - chmod +x ./scripts/send-mattermost-message.sh
    # Configure git
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_TOOLKIT" > ~/.ssh/id_rsa; chmod 0600 ~/.ssh/id_rsa
    - echo "StrictHostKeyChecking no " > /root/.ssh/config
    - git config --global http.sslVerify false
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "ðŸ¤– GitLab CI/CD"
    - echo "setting origin remote to 'git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git'"
    - git remote rm origin
    - git remote add origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git
    - git fetch --quiet
    - git checkout "$CI_COMMIT_REF_NAME"
    # Only complete pipeline if version does not already exist
    - >
      if [ $(git tag -l "$VERSION") ]; then
        echo "Version $VERSION already exists"
        exit 1
      else
        echo "Tagging release in git"
        git tag $VERSION -m "ðŸ¤– Tagged by Gitlab CI/CD Pipeline" -m "For further reference see $CI_PIPELINE_URL" -m "[skip ci]"
        echo "Pushing tag to remote repository"
        git push origin $VERSION --no-verify
        echo "Notifying MatterMost"
        ./scripts/send-mattermost-message.sh "$MATTERMOST_BOT_KEY" "$MESSAGE"
      fi
